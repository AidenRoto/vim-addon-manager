This list is incomplete. Improve it!

The reason for this file is to help users choose a system to fit their needs
faster - and to find out why so much effort was put into this topic - cause I thought VAM would satisfy almost all needs .. Obviously I was wrong. So I'd like to document it.

GLVS = GetLatestVimScript [VimL] (Vim $RUNTIME files)
PAT  = pathogen          [VimL] (2008-08-07 -> vim.sf.net)
MANA = VIMANA           [perl] (first commit 2009-08-07)
VAM  = vim-addon-manager [VimL] (first commit 2009-12-27)
JOLT = jolt             [python] (first commit 2010-08-06)
VUN = Vundle            [VimL]       (first commit 2010-10-18)
VSU = Vim Script Updater [python] (2010-07-1 -> vim.sf.net)
VTS = vim-nicktears     [ruby] (2010-08-19)
VCSDO = vcsdo           [ruby] (first commit 2010-10-31)
        (-> https://github.com/tomtom/vcsdo)
GVS = get vim scripts   [bash] (2011-03)
TPL = tplugin [VimL] (2011-03 -> github)

DESIGN CHOICES
=============
VAM:
  - declare script dependencies (make sharing code easier)
  - declarative (specify list of plugins you want to have installed)
  - minimal (20% effort and get 80% of value)
  - minimize code to be run at startup
  - allow activating / installing plugins without restarting Vim
    (=> VimL must be used)
  - allow fixing bugs even if maintainers are on holidays.
    Thus provide a maintained list of plugin sources 
    (-> vim-addon-manager-known-repositories)

PAT needs you to manually download plugins and put them inside a directory
    which pathogen will load at startup.
VUN can search http://vim-scripts.org/vim/scripts.html by name and you tell
    which names you're interested in in your .vimrc, before calling a command
    that installs them.
VAM has a repository dedicated to listing vim plugins and their dependencies,
    and is conceptually different than Vundle.
TPL works similarly to PAT but adds directories to the runtimepath only 
    when needed. TPL scans all repositories for commands, functions 
    etc. It generate proxy commands for those items found and loads the 
    original file when invoking a command/function for the first time. 
    The goal is to have numerous plugins readily available with minimal 
    impact on startup time. Users have to run :TPluginScan first.

REASONS FOR STARTING THE PROJECT
================================
PAT: ? Probably because GLVS did not handle git etc ? (ask author)

VAM: VimL (see above), dependency management, minimize text users have to write
     (spceifying names only). Those features did not exist previously.

TPL  A replacement for the AsNeeded plugin that makes it easy to use 
     plugins provided as vcs repositories (similar to PAT, VAM etc.)


Perquisites
=============
VAM: curl, tar or 7z
others: TODO: Also refer to the used language

Can install plugins without restarting:
=======================================
What does this mean? add directory to runtimepath is not enough.
You also have to source plugin/*.vim and maybe plugin/after/* files and such.
VAM: :ActivateAddon NAME and you're done

all others: you can always sources the .vim files manually to get the same
result.

dependency management
=====================
VAM: see *-addon-info.txt files which contains a key "dependencies"
VUN: none
PAT: none
TPL: Uses _tplugin.vim files to run hooks. Since version 0.12, TPL it 
     can make use of VAM's *-addon-info.txt files.

addon sources ?
===============
VAM: by plugin name. vim-addon-manager-known-repositories contains repo info.
     You can add your own sources in ~/.vimrc or by other ways easily
VUN: You can give a git url for a Bundle
PAT: You can git clone a plugin into the plugin's directory manually
TPL: Use VAM or clone a plugin manually as with PAT.

Tags:
=====
VAM: runs helptags automatically
VUN: runs helptags automatically
PAT: runs helptags automatically
TPL: Generates helptags when scanning the plugin repositories.

extra dirs hacks (load files which are not loaded when adding to runtimepath only)
===================
VAM: See if !has('vim_starting') in autoload/vam.vim
VUN: ?
PAT: I haven't seen so[urce] or ru[ntime] usage in pathogen.vim. So I guess
     this feature does not exist
TPL: Loads files as required

support for VimBalls:
======================
VAM: YES
VUN: ?
PAT: need to put them in a special directory (?)
TPL: The author uses https://github.com/tomtom/vimball.rb to extract 
     vimballs to single directories under the bundle root directory

uninstallation:
===============
VAM: UninstallNotLoadedAddons
VUN: ?
PAT: delete the plugin's directory manually
TPL: delete the plugin's directory manually

